/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by pbtools.
 */

#ifndef MSG_H
#define MSG_H

#ifdef __cplusplus
extern "C" {
#endif

#include "pbtools.h"

/**
 * Message uiohook.KeyData.
 */
struct uiohook_key_data_repeated_t {
    int length;
    struct uiohook_key_data_t *items_p;
};

struct uiohook_key_data_t {
    struct pbtools_message_base_t base;
    uint32_t key_code;
    uint32_t raw_code;
    uint32_t key_char;
};

/**
 * Message uiohook.MouseData.
 */
struct uiohook_mouse_data_repeated_t {
    int length;
    struct uiohook_mouse_data_t *items_p;
};

struct uiohook_mouse_data_t {
    struct pbtools_message_base_t base;
    uint32_t button;
    uint32_t clicks;
    int32_t x;
    int32_t y;
};

/**
 * Message uiohook.WheelData.
 */
struct uiohook_wheel_data_repeated_t {
    int length;
    struct uiohook_wheel_data_t *items_p;
};

struct uiohook_wheel_data_t {
    struct pbtools_message_base_t base;
    uint32_t type;
    uint32_t clicks;
    int32_t x;
    int32_t y;
    uint32_t amount;
    int32_t rotation;
    uint32_t direction;
};

/**
 * Enum uiohook.Msg.data.
 */
enum uiohook_msg_data_e {
    uiohook_msg_data_none_e = 0,
    uiohook_msg_data_key_e = 1,
    uiohook_msg_data_mouse_e = 2,
    uiohook_msg_data_wheel_e = 3
};

/**
 * Message uiohook.Msg.
 */
struct uiohook_msg_repeated_t {
    int length;
    struct uiohook_msg_t *items_p;
};

struct uiohook_msg_t {
    struct pbtools_message_base_t base;
    uint32_t type;
    uint64_t time;
    uint32_t mask;
    uint32_t reserved;
    enum uiohook_msg_data_e data;
    union {
        struct uiohook_key_data_t *key_p;
        struct uiohook_mouse_data_t *mouse_p;
        struct uiohook_wheel_data_t *wheel_p;
    };
};

/**
 * Encoding and decoding of uiohook.KeyData.
 */
struct uiohook_key_data_t *
uiohook_key_data_new(
    void *workspace_p,
    size_t size);

int uiohook_key_data_encode(
    struct uiohook_key_data_t *self_p,
    uint8_t *encoded_p,
    size_t size);

int uiohook_key_data_decode(
    struct uiohook_key_data_t *self_p,
    const uint8_t *encoded_p,
    size_t size);

/**
 * Encoding and decoding of uiohook.MouseData.
 */
struct uiohook_mouse_data_t *
uiohook_mouse_data_new(
    void *workspace_p,
    size_t size);

int uiohook_mouse_data_encode(
    struct uiohook_mouse_data_t *self_p,
    uint8_t *encoded_p,
    size_t size);

int uiohook_mouse_data_decode(
    struct uiohook_mouse_data_t *self_p,
    const uint8_t *encoded_p,
    size_t size);

/**
 * Encoding and decoding of uiohook.WheelData.
 */
struct uiohook_wheel_data_t *
uiohook_wheel_data_new(
    void *workspace_p,
    size_t size);

int uiohook_wheel_data_encode(
    struct uiohook_wheel_data_t *self_p,
    uint8_t *encoded_p,
    size_t size);

int uiohook_wheel_data_decode(
    struct uiohook_wheel_data_t *self_p,
    const uint8_t *encoded_p,
    size_t size);

int uiohook_msg_key_alloc(
    struct uiohook_msg_t *self_p);

int uiohook_msg_mouse_alloc(
    struct uiohook_msg_t *self_p);

int uiohook_msg_wheel_alloc(
    struct uiohook_msg_t *self_p);

/**
 * Encoding and decoding of uiohook.Msg.
 */
struct uiohook_msg_t *
uiohook_msg_new(
    void *workspace_p,
    size_t size);

int uiohook_msg_encode(
    struct uiohook_msg_t *self_p,
    uint8_t *encoded_p,
    size_t size);

int uiohook_msg_decode(
    struct uiohook_msg_t *self_p,
    const uint8_t *encoded_p,
    size_t size);

/* Internal functions. Do not use! */

void uiohook_key_data_init(
    struct uiohook_key_data_t *self_p,
    struct pbtools_heap_t *heap_p);

void uiohook_key_data_encode_inner(
    struct pbtools_encoder_t *encoder_p,
    struct uiohook_key_data_t *self_p);

void uiohook_key_data_decode_inner(
    struct pbtools_decoder_t *decoder_p,
    struct uiohook_key_data_t *self_p);

void uiohook_key_data_encode_repeated_inner(
    struct pbtools_encoder_t *encoder_p,
    int field_number,
    struct uiohook_key_data_repeated_t *repeated_p);

void uiohook_key_data_decode_repeated_inner(
    struct pbtools_decoder_t *decoder_p,
    struct pbtools_repeated_info_t *repeated_info_p,
    struct uiohook_key_data_repeated_t *repeated_p);

void uiohook_mouse_data_init(
    struct uiohook_mouse_data_t *self_p,
    struct pbtools_heap_t *heap_p);

void uiohook_mouse_data_encode_inner(
    struct pbtools_encoder_t *encoder_p,
    struct uiohook_mouse_data_t *self_p);

void uiohook_mouse_data_decode_inner(
    struct pbtools_decoder_t *decoder_p,
    struct uiohook_mouse_data_t *self_p);

void uiohook_mouse_data_encode_repeated_inner(
    struct pbtools_encoder_t *encoder_p,
    int field_number,
    struct uiohook_mouse_data_repeated_t *repeated_p);

void uiohook_mouse_data_decode_repeated_inner(
    struct pbtools_decoder_t *decoder_p,
    struct pbtools_repeated_info_t *repeated_info_p,
    struct uiohook_mouse_data_repeated_t *repeated_p);

void uiohook_wheel_data_init(
    struct uiohook_wheel_data_t *self_p,
    struct pbtools_heap_t *heap_p);

void uiohook_wheel_data_encode_inner(
    struct pbtools_encoder_t *encoder_p,
    struct uiohook_wheel_data_t *self_p);

void uiohook_wheel_data_decode_inner(
    struct pbtools_decoder_t *decoder_p,
    struct uiohook_wheel_data_t *self_p);

void uiohook_wheel_data_encode_repeated_inner(
    struct pbtools_encoder_t *encoder_p,
    int field_number,
    struct uiohook_wheel_data_repeated_t *repeated_p);

void uiohook_wheel_data_decode_repeated_inner(
    struct pbtools_decoder_t *decoder_p,
    struct pbtools_repeated_info_t *repeated_info_p,
    struct uiohook_wheel_data_repeated_t *repeated_p);

void uiohook_msg_init(
    struct uiohook_msg_t *self_p,
    struct pbtools_heap_t *heap_p);

void uiohook_msg_encode_inner(
    struct pbtools_encoder_t *encoder_p,
    struct uiohook_msg_t *self_p);

void uiohook_msg_decode_inner(
    struct pbtools_decoder_t *decoder_p,
    struct uiohook_msg_t *self_p);

void uiohook_msg_encode_repeated_inner(
    struct pbtools_encoder_t *encoder_p,
    int field_number,
    struct uiohook_msg_repeated_t *repeated_p);

void uiohook_msg_decode_repeated_inner(
    struct pbtools_decoder_t *decoder_p,
    struct pbtools_repeated_info_t *repeated_info_p,
    struct uiohook_msg_repeated_t *repeated_p);

#ifdef __cplusplus
}
#endif

#endif
